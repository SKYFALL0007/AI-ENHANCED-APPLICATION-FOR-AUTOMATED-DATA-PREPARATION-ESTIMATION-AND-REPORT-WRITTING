import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { EstimateResult } from '../types/survey';

export class ReportGenerator {
  static async generatePDF(
    data: {
      filename: string;
      originalRows: number;
      cleanedRows: number;
      estimates: EstimateResult[];
      descriptiveStats: any[];
      processingSteps: any[];
    }
  ): Promise<Blob> {
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.width;
    const pageHeight = pdf.internal.pageSize.height;
    let yPosition = 20;

    // Title
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Survey Data Analysis Report', pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 15;

    // Report metadata
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Generated on: ${new Date().toLocaleString()}`, 20, yPosition);
    yPosition += 8;
    pdf.text(`Source file: ${data.filename}`, 20, yPosition);
    yPosition += 8;
    pdf.text(`Original records: ${data.originalRows}`, 20, yPosition);
    yPosition += 8;
    pdf.text(`Cleaned records: ${data.cleanedRows}`, 20, yPosition);
    yPosition += 15;

    // Data Quality Summary
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Data Quality Summary', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    const qualityText = `Records retained: ${((data.cleanedRows / data.originalRows) * 100).toFixed(1)}%`;
    pdf.text(qualityText, 20, yPosition);
    yPosition += 15;

    // Processing Steps
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Processing Steps', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    data.processingSteps.forEach(step => {
      if (yPosition > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }
      pdf.text(`âœ“ ${step.title}`, 20, yPosition);
      yPosition += 6;
    });
    yPosition += 10;

    // Descriptive Statistics
    if (yPosition > pageHeight - 40) {
      pdf.addPage();
      yPosition = 20;
    }

    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Descriptive Statistics', 20, yPosition);
    yPosition += 10;

    // Table headers
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'bold');
    const headers = ['Variable', 'Count', 'Mean', 'Median', 'Std Dev', 'Min', 'Max'];
    const colWidths = [30, 20, 25, 25, 25, 20, 25];
    let xPos = 20;

    headers.forEach((header, index) => {
      pdf.text(header, xPos, yPosition);
      xPos += colWidths[index];
    });
    yPosition += 8;

    // Table rows
    pdf.setFont('helvetica', 'normal');
    data.descriptiveStats.forEach(stat => {
      if (yPosition > pageHeight - 15) {
        pdf.addPage();
        yPosition = 20;
      }

      xPos = 20;
      const values = [
        stat.column,
        stat.count.toString(),
        stat.mean.toString(),
        stat.median.toString(),
        stat.std.toString(),
        stat.min.toString(),
        stat.max.toString()
      ];

      values.forEach((value, index) => {
        pdf.text(value, xPos, yPosition);
        xPos += colWidths[index];
      });
      yPosition += 6;
    });

    // Statistical Estimates
    if (yPosition > pageHeight - 40) {
      pdf.addPage();
      yPosition = 20;
    }

    yPosition += 15;
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Statistical Estimates', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'bold');
    const estimateHeaders = ['Variable', 'Estimate', 'Std Error', 'Margin of Error', '95% CI Lower', '95% CI Upper', 'Sample Size'];
    const estimateColWidths = [25, 20, 20, 22, 22, 22, 19];

    xPos = 20;
    estimateHeaders.forEach((header, index) => {
      pdf.text(header, xPos, yPosition);
      xPos += estimateColWidths[index];
    });
    yPosition += 8;

    pdf.setFont('helvetica', 'normal');
    data.estimates.forEach(estimate => {
      if (yPosition > pageHeight - 15) {
        pdf.addPage();
        yPosition = 20;
      }

      xPos = 20;
      const values = [
        estimate.variable,
        estimate.estimate.toFixed(4),
        estimate.standardError.toFixed(4),
        estimate.marginOfError.toFixed(4),
        estimate.confidenceInterval[0].toFixed(4),
        estimate.confidenceInterval[1].toFixed(4),
        estimate.sampleSize.toString()
      ];

      values.forEach((value, index) => {
        pdf.text(value, xPos, yPosition);
        xPos += estimateColWidths[index];
      });
      yPosition += 6;
    });

    // Footer
    const footerText = 'Generated by Survey Analysis Platform';
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'italic');
    pdf.text(footerText, pageWidth / 2, pageHeight - 10, { align: 'center' });

    return pdf.output('blob');
  }

  static generateHTML(data: any): string {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Survey Analysis Report</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .header { text-align: center; margin-bottom: 30px; }
          .section { margin-bottom: 30px; }
          table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; }
          .metadata { background-color: #f9f9f9; padding: 20px; border-radius: 5px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Survey Data Analysis Report</h1>
          <p>Generated on ${new Date().toLocaleString()}</p>
        </div>
        
        <div class="section metadata">
          <h2>Report Metadata</h2>
          <p><strong>Source file:</strong> ${data.filename}</p>
          <p><strong>Original records:</strong> ${data.originalRows}</p>
          <p><strong>Cleaned records:</strong> ${data.cleanedRows}</p>
          <p><strong>Data retention rate:</strong> ${((data.cleanedRows / data.originalRows) * 100).toFixed(1)}%</p>
        </div>

        <div class="section">
          <h2>Processing Steps</h2>
          <ul>
            ${data.processingSteps.map((step: any) => `<li>${step.title}</li>`).join('')}
          </ul>
        </div>

        <div class="section">
          <h2>Descriptive Statistics</h2>
          <table>
            <tr>
              <th>Variable</th><th>Count</th><th>Mean</th><th>Median</th><th>Std Dev</th><th>Min</th><th>Max</th>
            </tr>
            ${data.descriptiveStats.map((stat: any) => `
              <tr>
                <td>${stat.column}</td>
                <td>${stat.count}</td>
                <td>${stat.mean}</td>
                <td>${stat.median}</td>
                <td>${stat.std}</td>
                <td>${stat.min}</td>
                <td>${stat.max}</td>
              </tr>
            `).join('')}
          </table>
        </div>

        <div class="section">
          <h2>Statistical Estimates</h2>
          <table>
            <tr>
              <th>Variable</th><th>Estimate</th><th>Standard Error</th><th>Margin of Error</th><th>95% CI Lower</th><th>95% CI Upper</th><th>Sample Size</th>
            </tr>
            ${data.estimates.map((estimate: any) => `
              <tr>
                <td>${estimate.variable}</td>
                <td>${estimate.estimate.toFixed(4)}</td>
                <td>${estimate.standardError.toFixed(4)}</td>
                <td>${estimate.marginOfError.toFixed(4)}</td>
                <td>${estimate.confidenceInterval[0].toFixed(4)}</td>
                <td>${estimate.confidenceInterval[1].toFixed(4)}</td>
                <td>${estimate.sampleSize}</td>
              </tr>
            `).join('')}
          </table>
        </div>
      </body>
      </html>
    `;
  }
}